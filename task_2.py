"""

Комментарии к коду:

1. Метод enqueue работает некорректно, добавляет элемент в начало очереди
2. Метод dequeue должен возвращать элемент с начала очереди (первый слева), возвращает с конца - рекомендую обратить внимание на индекс, указанный в методе pop()
3. Замечательно, что проверили в методе peek возможность ввода некорректного индекса!
4. Касательно очистки очереди - метод работает корректно, но достаточно будет вызвать метод list.clear(), остальное лишь загромождает код и усложняет для чтения
5. Рекомендация: для тестирования кода будет удобнее, если добавите в класс метод __str__ и будете выводить содержимое очереди

Ниже приведены изменения кода на основе работы студента
"""
from typing import Any


class Queue:
    def __init__(self):
        """
        начало очереди - слева (первый индекс списка)
        конец очереди - справа (последний индекс списка)
        """
        self.queue = []

    def enqueue(self, elem: Any) -> None:
        """
        Операция добавления элемента в конец очереди.
        :param elem: элемент, который следует добавить в очередь
        :return: None
        """
        self.queue.append(elem)

    def dequeue(self) -> Any:
        """
        Вернуть элемент с начала очереди. Следует вернуть None, если элемента нет.
        :return: Снятый с начала очереди элемент
        """
        if len(self.queue) == 0:
            return None

        value = self.queue.pop(0)
        return value

    def peek(self, ind: int = 0) -> Any:
        """
        Метод позволяет вам увидеть элемент в очереди, не удаляя его из очереди
        :param ind: индекс элемента с начала очереди
        :return: Просмотренный элемент
        """
        if ind < 0 or ind >= len(self.queue):
            return None

        value = self.queue[ind]
        return value

    def clear(self) -> None:
        """ Очистить очередь. """
        self.queue.clear()

    
    def __str__(self):
        return f'{self.queue}'
